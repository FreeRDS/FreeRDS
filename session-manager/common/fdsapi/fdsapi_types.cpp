/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "fdsapi_types.h"

#include <algorithm>

namespace freerds {

const char* TClientDisplay::ascii_fingerprint = "6435B39C87AB0E30F30BEDEFD7328C0D";
const uint8_t TClientDisplay::binary_fingerprint[16] = {0x64,0x35,0xB3,0x9C,0x87,0xAB,0x0E,0x30,0xF3,0x0B,0xED,0xEF,0xD7,0x32,0x8C,0x0D};

uint32_t TClientDisplay::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->displayWidth);
          this->__isset.displayWidth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->displayHeight);
          this->__isset.displayHeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->colorDepth);
          this->__isset.colorDepth = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TClientDisplay::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TClientDisplay");

  xfer += oprot->writeFieldBegin("displayWidth", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->displayWidth);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayHeight", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->displayHeight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("colorDepth", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->colorDepth);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TClientDisplay &a, TClientDisplay &b) {
  using ::std::swap;
  swap(a.displayWidth, b.displayWidth);
  swap(a.displayHeight, b.displayHeight);
  swap(a.colorDepth, b.colorDepth);
  swap(a.__isset, b.__isset);
}

const char* TSessionInfo::ascii_fingerprint = "4086F12A5C2D615560236565C542F3C3";
const uint8_t TSessionInfo::binary_fingerprint[16] = {0x40,0x86,0xF1,0x2A,0x5C,0x2D,0x61,0x55,0x60,0x23,0x65,0x65,0xC5,0x42,0xF3,0xC3};

uint32_t TSessionInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->sessionId);
          this->__isset.sessionId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->connectState);
          this->__isset.connectState = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->winStationName);
          this->__isset.winStationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSessionInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TSessionInfo");

  xfer += oprot->writeFieldBegin("sessionId", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->sessionId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("connectState", ::apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->connectState);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("winStationName", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->winStationName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSessionInfo &a, TSessionInfo &b) {
  using ::std::swap;
  swap(a.sessionId, b.sessionId);
  swap(a.connectState, b.connectState);
  swap(a.winStationName, b.winStationName);
  swap(a.__isset, b.__isset);
}

const char* TSessionInfoValue::ascii_fingerprint = "7EBBEEF91A8512A99B13F41EFCC46DD3";
const uint8_t TSessionInfoValue::binary_fingerprint[16] = {0x7E,0xBB,0xEE,0xF9,0x1A,0x85,0x12,0xA9,0x9B,0x13,0xF4,0x1E,0xFC,0xC4,0x6D,0xD3};

uint32_t TSessionInfoValue::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->boolValue);
          this->__isset.boolValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->int16Value);
          this->__isset.int16Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->int32Value);
          this->__isset.int32Value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stringValue);
          this->__isset.stringValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->displayValue.read(iprot);
          this->__isset.displayValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TSessionInfoValue::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TSessionInfoValue");

  xfer += oprot->writeFieldBegin("boolValue", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->boolValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("int16Value", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->int16Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("int32Value", ::apache::thrift::protocol::T_I32, 3);
  xfer += oprot->writeI32(this->int32Value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stringValue", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->stringValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("displayValue", ::apache::thrift::protocol::T_STRUCT, 5);
  xfer += this->displayValue.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TSessionInfoValue &a, TSessionInfoValue &b) {
  using ::std::swap;
  swap(a.boolValue, b.boolValue);
  swap(a.int16Value, b.int16Value);
  swap(a.int32Value, b.int32Value);
  swap(a.stringValue, b.stringValue);
  swap(a.displayValue, b.displayValue);
  swap(a.__isset, b.__isset);
}

const char* TReturnEnumerateSessions::ascii_fingerprint = "5E1654B463B78DBF34D5E70CA455347C";
const uint8_t TReturnEnumerateSessions::binary_fingerprint[16] = {0x5E,0x16,0x54,0xB4,0x63,0xB7,0x8D,0xBF,0x34,0xD5,0xE7,0x0C,0xA4,0x55,0x34,0x7C};

uint32_t TReturnEnumerateSessions::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->returnValue);
          this->__isset.returnValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->sessionInfoList.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->sessionInfoList.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->sessionInfoList[_i4].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.sessionInfoList = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TReturnEnumerateSessions::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TReturnEnumerateSessions");

  xfer += oprot->writeFieldBegin("returnValue", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->returnValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sessionInfoList", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->sessionInfoList.size()));
    std::vector<TSessionInfo> ::const_iterator _iter5;
    for (_iter5 = this->sessionInfoList.begin(); _iter5 != this->sessionInfoList.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TReturnEnumerateSessions &a, TReturnEnumerateSessions &b) {
  using ::std::swap;
  swap(a.returnValue, b.returnValue);
  swap(a.sessionInfoList, b.sessionInfoList);
  swap(a.__isset, b.__isset);
}

const char* TReturnQuerySessionInformation::ascii_fingerprint = "F29EFD14B0795544EEB6D15C1CC61C45";
const uint8_t TReturnQuerySessionInformation::binary_fingerprint[16] = {0xF2,0x9E,0xFD,0x14,0xB0,0x79,0x55,0x44,0xEE,0xB6,0xD1,0x5C,0x1C,0xC6,0x1C,0x45};

uint32_t TReturnQuerySessionInformation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->returnValue);
          this->__isset.returnValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->infoValue.read(iprot);
          this->__isset.infoValue = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t TReturnQuerySessionInformation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("TReturnQuerySessionInformation");

  xfer += oprot->writeFieldBegin("returnValue", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->returnValue);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("infoValue", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->infoValue.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(TReturnQuerySessionInformation &a, TReturnQuerySessionInformation &b) {
  using ::std::swap;
  swap(a.returnValue, b.returnValue);
  swap(a.infoValue, b.infoValue);
  swap(a.__isset, b.__isset);
}

} // namespace
