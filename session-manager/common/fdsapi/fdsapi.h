/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef fdsapi_H
#define fdsapi_H

#include <thrift/TDispatchProcessor.h>
#include "fdsapi_types.h"

namespace freerds {

class fdsapiIf {
 public:
  virtual ~fdsapiIf() {}
  virtual TINT32 ping(const TINT32 input) = 0;
  virtual TINT32 authenticateUser(const TSTRING& authToken, const TINT32 sessionId, const TSTRING& username, const TSTRING& password, const TSTRING& domain) = 0;
  virtual void virtualChannelOpen(TSTRING& _return, const TSTRING& authToken, const TINT32 sessionId, const TSTRING& virtualName) = 0;
  virtual void virtualChannelOpenEx(TSTRING& _return, const TSTRING& authToken, const TINT32 sessionId, const TSTRING& virtualName, const TINT32 flags) = 0;
  virtual TBOOL virtualChannelClose(const TSTRING& authToken, const TINT32 sessionId, const TSTRING& virtualName) = 0;
  virtual TBOOL disconnectSession(const TSTRING& authToken, const TINT32 sessionId, const TBOOL wait) = 0;
  virtual TBOOL logoffSession(const TSTRING& authToken, const TINT32 sessionId, const TBOOL wait) = 0;
  virtual TBOOL shutdownSystem(const TSTRING& authToken, const TINT32 shutdownFlag) = 0;
  virtual void enumerateSessions(TReturnEnumerateSessions& _return, const TSTRING& authToken, const TINT32 Version) = 0;
  virtual void querySessionInformation(TReturnQuerySessionInformation& _return, const TSTRING& authToken, const TINT32 sessionId, const TINT32 infoClass) = 0;
};

class fdsapiIfFactory {
 public:
  typedef fdsapiIf Handler;

  virtual ~fdsapiIfFactory() {}

  virtual fdsapiIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(fdsapiIf* /* handler */) = 0;
};

class fdsapiIfSingletonFactory : virtual public fdsapiIfFactory {
 public:
  fdsapiIfSingletonFactory(const boost::shared_ptr<fdsapiIf>& iface) : iface_(iface) {}
  virtual ~fdsapiIfSingletonFactory() {}

  virtual fdsapiIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(fdsapiIf* /* handler */) {}

 protected:
  boost::shared_ptr<fdsapiIf> iface_;
};

class fdsapiNull : virtual public fdsapiIf {
 public:
  virtual ~fdsapiNull() {}
  TINT32 ping(const TINT32 /* input */) {
    TINT32 _return = 0;
    return _return;
  }
  TINT32 authenticateUser(const TSTRING& /* authToken */, const TINT32 /* sessionId */, const TSTRING& /* username */, const TSTRING& /* password */, const TSTRING& /* domain */) {
    TINT32 _return = 0;
    return _return;
  }
  void virtualChannelOpen(TSTRING& /* _return */, const TSTRING& /* authToken */, const TINT32 /* sessionId */, const TSTRING& /* virtualName */) {
    return;
  }
  void virtualChannelOpenEx(TSTRING& /* _return */, const TSTRING& /* authToken */, const TINT32 /* sessionId */, const TSTRING& /* virtualName */, const TINT32 /* flags */) {
    return;
  }
  TBOOL virtualChannelClose(const TSTRING& /* authToken */, const TINT32 /* sessionId */, const TSTRING& /* virtualName */) {
    TBOOL _return = false;
    return _return;
  }
  TBOOL disconnectSession(const TSTRING& /* authToken */, const TINT32 /* sessionId */, const TBOOL /* wait */) {
    TBOOL _return = false;
    return _return;
  }
  TBOOL logoffSession(const TSTRING& /* authToken */, const TINT32 /* sessionId */, const TBOOL /* wait */) {
    TBOOL _return = false;
    return _return;
  }
  TBOOL shutdownSystem(const TSTRING& /* authToken */, const TINT32 /* shutdownFlag */) {
    TBOOL _return = false;
    return _return;
  }
  void enumerateSessions(TReturnEnumerateSessions& /* _return */, const TSTRING& /* authToken */, const TINT32 /* Version */) {
    return;
  }
  void querySessionInformation(TReturnQuerySessionInformation& /* _return */, const TSTRING& /* authToken */, const TINT32 /* sessionId */, const TINT32 /* infoClass */) {
    return;
  }
};

typedef struct _fdsapi_ping_args__isset {
  _fdsapi_ping_args__isset() : input(false) {}
  bool input;
} _fdsapi_ping_args__isset;

class fdsapi_ping_args {
 public:

  fdsapi_ping_args() : input(0) {
  }

  virtual ~fdsapi_ping_args() throw() {}

  TINT32 input;

  _fdsapi_ping_args__isset __isset;

  void __set_input(const TINT32 val) {
    input = val;
  }

  bool operator == (const fdsapi_ping_args & rhs) const
  {
    if (!(input == rhs.input))
      return false;
    return true;
  }
  bool operator != (const fdsapi_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fdsapi_ping_pargs {
 public:


  virtual ~fdsapi_ping_pargs() throw() {}

  const TINT32* input;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_ping_result__isset {
  _fdsapi_ping_result__isset() : success(false) {}
  bool success;
} _fdsapi_ping_result__isset;

class fdsapi_ping_result {
 public:

  fdsapi_ping_result() : success(0) {
  }

  virtual ~fdsapi_ping_result() throw() {}

  TINT32 success;

  _fdsapi_ping_result__isset __isset;

  void __set_success(const TINT32 val) {
    success = val;
  }

  bool operator == (const fdsapi_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const fdsapi_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_ping_presult__isset {
  _fdsapi_ping_presult__isset() : success(false) {}
  bool success;
} _fdsapi_ping_presult__isset;

class fdsapi_ping_presult {
 public:


  virtual ~fdsapi_ping_presult() throw() {}

  TINT32* success;

  _fdsapi_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fdsapi_authenticateUser_args__isset {
  _fdsapi_authenticateUser_args__isset() : authToken(false), sessionId(false), username(false), password(false), domain(false) {}
  bool authToken;
  bool sessionId;
  bool username;
  bool password;
  bool domain;
} _fdsapi_authenticateUser_args__isset;

class fdsapi_authenticateUser_args {
 public:

  fdsapi_authenticateUser_args() : authToken(), sessionId(0), username(), password(), domain() {
  }

  virtual ~fdsapi_authenticateUser_args() throw() {}

  TSTRING authToken;
  TINT32 sessionId;
  TSTRING username;
  TSTRING password;
  TSTRING domain;

  _fdsapi_authenticateUser_args__isset __isset;

  void __set_authToken(const TSTRING& val) {
    authToken = val;
  }

  void __set_sessionId(const TINT32 val) {
    sessionId = val;
  }

  void __set_username(const TSTRING& val) {
    username = val;
  }

  void __set_password(const TSTRING& val) {
    password = val;
  }

  void __set_domain(const TSTRING& val) {
    domain = val;
  }

  bool operator == (const fdsapi_authenticateUser_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(username == rhs.username))
      return false;
    if (!(password == rhs.password))
      return false;
    if (!(domain == rhs.domain))
      return false;
    return true;
  }
  bool operator != (const fdsapi_authenticateUser_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_authenticateUser_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fdsapi_authenticateUser_pargs {
 public:


  virtual ~fdsapi_authenticateUser_pargs() throw() {}

  const TSTRING* authToken;
  const TINT32* sessionId;
  const TSTRING* username;
  const TSTRING* password;
  const TSTRING* domain;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_authenticateUser_result__isset {
  _fdsapi_authenticateUser_result__isset() : success(false) {}
  bool success;
} _fdsapi_authenticateUser_result__isset;

class fdsapi_authenticateUser_result {
 public:

  fdsapi_authenticateUser_result() : success(0) {
  }

  virtual ~fdsapi_authenticateUser_result() throw() {}

  TINT32 success;

  _fdsapi_authenticateUser_result__isset __isset;

  void __set_success(const TINT32 val) {
    success = val;
  }

  bool operator == (const fdsapi_authenticateUser_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const fdsapi_authenticateUser_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_authenticateUser_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_authenticateUser_presult__isset {
  _fdsapi_authenticateUser_presult__isset() : success(false) {}
  bool success;
} _fdsapi_authenticateUser_presult__isset;

class fdsapi_authenticateUser_presult {
 public:


  virtual ~fdsapi_authenticateUser_presult() throw() {}

  TINT32* success;

  _fdsapi_authenticateUser_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fdsapi_virtualChannelOpen_args__isset {
  _fdsapi_virtualChannelOpen_args__isset() : authToken(false), sessionId(false), virtualName(false) {}
  bool authToken;
  bool sessionId;
  bool virtualName;
} _fdsapi_virtualChannelOpen_args__isset;

class fdsapi_virtualChannelOpen_args {
 public:

  fdsapi_virtualChannelOpen_args() : authToken(), sessionId(0), virtualName() {
  }

  virtual ~fdsapi_virtualChannelOpen_args() throw() {}

  TSTRING authToken;
  TINT32 sessionId;
  TSTRING virtualName;

  _fdsapi_virtualChannelOpen_args__isset __isset;

  void __set_authToken(const TSTRING& val) {
    authToken = val;
  }

  void __set_sessionId(const TINT32 val) {
    sessionId = val;
  }

  void __set_virtualName(const TSTRING& val) {
    virtualName = val;
  }

  bool operator == (const fdsapi_virtualChannelOpen_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(virtualName == rhs.virtualName))
      return false;
    return true;
  }
  bool operator != (const fdsapi_virtualChannelOpen_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_virtualChannelOpen_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fdsapi_virtualChannelOpen_pargs {
 public:


  virtual ~fdsapi_virtualChannelOpen_pargs() throw() {}

  const TSTRING* authToken;
  const TINT32* sessionId;
  const TSTRING* virtualName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_virtualChannelOpen_result__isset {
  _fdsapi_virtualChannelOpen_result__isset() : success(false) {}
  bool success;
} _fdsapi_virtualChannelOpen_result__isset;

class fdsapi_virtualChannelOpen_result {
 public:

  fdsapi_virtualChannelOpen_result() : success() {
  }

  virtual ~fdsapi_virtualChannelOpen_result() throw() {}

  TSTRING success;

  _fdsapi_virtualChannelOpen_result__isset __isset;

  void __set_success(const TSTRING& val) {
    success = val;
  }

  bool operator == (const fdsapi_virtualChannelOpen_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const fdsapi_virtualChannelOpen_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_virtualChannelOpen_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_virtualChannelOpen_presult__isset {
  _fdsapi_virtualChannelOpen_presult__isset() : success(false) {}
  bool success;
} _fdsapi_virtualChannelOpen_presult__isset;

class fdsapi_virtualChannelOpen_presult {
 public:


  virtual ~fdsapi_virtualChannelOpen_presult() throw() {}

  TSTRING* success;

  _fdsapi_virtualChannelOpen_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fdsapi_virtualChannelOpenEx_args__isset {
  _fdsapi_virtualChannelOpenEx_args__isset() : authToken(false), sessionId(false), virtualName(false), flags(false) {}
  bool authToken;
  bool sessionId;
  bool virtualName;
  bool flags;
} _fdsapi_virtualChannelOpenEx_args__isset;

class fdsapi_virtualChannelOpenEx_args {
 public:

  fdsapi_virtualChannelOpenEx_args() : authToken(), sessionId(0), virtualName(), flags(0) {
  }

  virtual ~fdsapi_virtualChannelOpenEx_args() throw() {}

  TSTRING authToken;
  TINT32 sessionId;
  TSTRING virtualName;
  TINT32 flags;

  _fdsapi_virtualChannelOpenEx_args__isset __isset;

  void __set_authToken(const TSTRING& val) {
    authToken = val;
  }

  void __set_sessionId(const TINT32 val) {
    sessionId = val;
  }

  void __set_virtualName(const TSTRING& val) {
    virtualName = val;
  }

  void __set_flags(const TINT32 val) {
    flags = val;
  }

  bool operator == (const fdsapi_virtualChannelOpenEx_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(virtualName == rhs.virtualName))
      return false;
    if (!(flags == rhs.flags))
      return false;
    return true;
  }
  bool operator != (const fdsapi_virtualChannelOpenEx_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_virtualChannelOpenEx_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fdsapi_virtualChannelOpenEx_pargs {
 public:


  virtual ~fdsapi_virtualChannelOpenEx_pargs() throw() {}

  const TSTRING* authToken;
  const TINT32* sessionId;
  const TSTRING* virtualName;
  const TINT32* flags;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_virtualChannelOpenEx_result__isset {
  _fdsapi_virtualChannelOpenEx_result__isset() : success(false) {}
  bool success;
} _fdsapi_virtualChannelOpenEx_result__isset;

class fdsapi_virtualChannelOpenEx_result {
 public:

  fdsapi_virtualChannelOpenEx_result() : success() {
  }

  virtual ~fdsapi_virtualChannelOpenEx_result() throw() {}

  TSTRING success;

  _fdsapi_virtualChannelOpenEx_result__isset __isset;

  void __set_success(const TSTRING& val) {
    success = val;
  }

  bool operator == (const fdsapi_virtualChannelOpenEx_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const fdsapi_virtualChannelOpenEx_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_virtualChannelOpenEx_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_virtualChannelOpenEx_presult__isset {
  _fdsapi_virtualChannelOpenEx_presult__isset() : success(false) {}
  bool success;
} _fdsapi_virtualChannelOpenEx_presult__isset;

class fdsapi_virtualChannelOpenEx_presult {
 public:


  virtual ~fdsapi_virtualChannelOpenEx_presult() throw() {}

  TSTRING* success;

  _fdsapi_virtualChannelOpenEx_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fdsapi_virtualChannelClose_args__isset {
  _fdsapi_virtualChannelClose_args__isset() : authToken(false), sessionId(false), virtualName(false) {}
  bool authToken;
  bool sessionId;
  bool virtualName;
} _fdsapi_virtualChannelClose_args__isset;

class fdsapi_virtualChannelClose_args {
 public:

  fdsapi_virtualChannelClose_args() : authToken(), sessionId(0), virtualName() {
  }

  virtual ~fdsapi_virtualChannelClose_args() throw() {}

  TSTRING authToken;
  TINT32 sessionId;
  TSTRING virtualName;

  _fdsapi_virtualChannelClose_args__isset __isset;

  void __set_authToken(const TSTRING& val) {
    authToken = val;
  }

  void __set_sessionId(const TINT32 val) {
    sessionId = val;
  }

  void __set_virtualName(const TSTRING& val) {
    virtualName = val;
  }

  bool operator == (const fdsapi_virtualChannelClose_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(virtualName == rhs.virtualName))
      return false;
    return true;
  }
  bool operator != (const fdsapi_virtualChannelClose_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_virtualChannelClose_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fdsapi_virtualChannelClose_pargs {
 public:


  virtual ~fdsapi_virtualChannelClose_pargs() throw() {}

  const TSTRING* authToken;
  const TINT32* sessionId;
  const TSTRING* virtualName;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_virtualChannelClose_result__isset {
  _fdsapi_virtualChannelClose_result__isset() : success(false) {}
  bool success;
} _fdsapi_virtualChannelClose_result__isset;

class fdsapi_virtualChannelClose_result {
 public:

  fdsapi_virtualChannelClose_result() : success(0) {
  }

  virtual ~fdsapi_virtualChannelClose_result() throw() {}

  TBOOL success;

  _fdsapi_virtualChannelClose_result__isset __isset;

  void __set_success(const TBOOL val) {
    success = val;
  }

  bool operator == (const fdsapi_virtualChannelClose_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const fdsapi_virtualChannelClose_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_virtualChannelClose_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_virtualChannelClose_presult__isset {
  _fdsapi_virtualChannelClose_presult__isset() : success(false) {}
  bool success;
} _fdsapi_virtualChannelClose_presult__isset;

class fdsapi_virtualChannelClose_presult {
 public:


  virtual ~fdsapi_virtualChannelClose_presult() throw() {}

  TBOOL* success;

  _fdsapi_virtualChannelClose_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fdsapi_disconnectSession_args__isset {
  _fdsapi_disconnectSession_args__isset() : authToken(false), sessionId(false), wait(false) {}
  bool authToken;
  bool sessionId;
  bool wait;
} _fdsapi_disconnectSession_args__isset;

class fdsapi_disconnectSession_args {
 public:

  fdsapi_disconnectSession_args() : authToken(), sessionId(0), wait(0) {
  }

  virtual ~fdsapi_disconnectSession_args() throw() {}

  TSTRING authToken;
  TINT32 sessionId;
  TBOOL wait;

  _fdsapi_disconnectSession_args__isset __isset;

  void __set_authToken(const TSTRING& val) {
    authToken = val;
  }

  void __set_sessionId(const TINT32 val) {
    sessionId = val;
  }

  void __set_wait(const TBOOL val) {
    wait = val;
  }

  bool operator == (const fdsapi_disconnectSession_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(wait == rhs.wait))
      return false;
    return true;
  }
  bool operator != (const fdsapi_disconnectSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_disconnectSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fdsapi_disconnectSession_pargs {
 public:


  virtual ~fdsapi_disconnectSession_pargs() throw() {}

  const TSTRING* authToken;
  const TINT32* sessionId;
  const TBOOL* wait;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_disconnectSession_result__isset {
  _fdsapi_disconnectSession_result__isset() : success(false) {}
  bool success;
} _fdsapi_disconnectSession_result__isset;

class fdsapi_disconnectSession_result {
 public:

  fdsapi_disconnectSession_result() : success(0) {
  }

  virtual ~fdsapi_disconnectSession_result() throw() {}

  TBOOL success;

  _fdsapi_disconnectSession_result__isset __isset;

  void __set_success(const TBOOL val) {
    success = val;
  }

  bool operator == (const fdsapi_disconnectSession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const fdsapi_disconnectSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_disconnectSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_disconnectSession_presult__isset {
  _fdsapi_disconnectSession_presult__isset() : success(false) {}
  bool success;
} _fdsapi_disconnectSession_presult__isset;

class fdsapi_disconnectSession_presult {
 public:


  virtual ~fdsapi_disconnectSession_presult() throw() {}

  TBOOL* success;

  _fdsapi_disconnectSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fdsapi_logoffSession_args__isset {
  _fdsapi_logoffSession_args__isset() : authToken(false), sessionId(false), wait(false) {}
  bool authToken;
  bool sessionId;
  bool wait;
} _fdsapi_logoffSession_args__isset;

class fdsapi_logoffSession_args {
 public:

  fdsapi_logoffSession_args() : authToken(), sessionId(0), wait(0) {
  }

  virtual ~fdsapi_logoffSession_args() throw() {}

  TSTRING authToken;
  TINT32 sessionId;
  TBOOL wait;

  _fdsapi_logoffSession_args__isset __isset;

  void __set_authToken(const TSTRING& val) {
    authToken = val;
  }

  void __set_sessionId(const TINT32 val) {
    sessionId = val;
  }

  void __set_wait(const TBOOL val) {
    wait = val;
  }

  bool operator == (const fdsapi_logoffSession_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(wait == rhs.wait))
      return false;
    return true;
  }
  bool operator != (const fdsapi_logoffSession_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_logoffSession_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fdsapi_logoffSession_pargs {
 public:


  virtual ~fdsapi_logoffSession_pargs() throw() {}

  const TSTRING* authToken;
  const TINT32* sessionId;
  const TBOOL* wait;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_logoffSession_result__isset {
  _fdsapi_logoffSession_result__isset() : success(false) {}
  bool success;
} _fdsapi_logoffSession_result__isset;

class fdsapi_logoffSession_result {
 public:

  fdsapi_logoffSession_result() : success(0) {
  }

  virtual ~fdsapi_logoffSession_result() throw() {}

  TBOOL success;

  _fdsapi_logoffSession_result__isset __isset;

  void __set_success(const TBOOL val) {
    success = val;
  }

  bool operator == (const fdsapi_logoffSession_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const fdsapi_logoffSession_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_logoffSession_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_logoffSession_presult__isset {
  _fdsapi_logoffSession_presult__isset() : success(false) {}
  bool success;
} _fdsapi_logoffSession_presult__isset;

class fdsapi_logoffSession_presult {
 public:


  virtual ~fdsapi_logoffSession_presult() throw() {}

  TBOOL* success;

  _fdsapi_logoffSession_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fdsapi_shutdownSystem_args__isset {
  _fdsapi_shutdownSystem_args__isset() : authToken(false), shutdownFlag(false) {}
  bool authToken;
  bool shutdownFlag;
} _fdsapi_shutdownSystem_args__isset;

class fdsapi_shutdownSystem_args {
 public:

  fdsapi_shutdownSystem_args() : authToken(), shutdownFlag(0) {
  }

  virtual ~fdsapi_shutdownSystem_args() throw() {}

  TSTRING authToken;
  TINT32 shutdownFlag;

  _fdsapi_shutdownSystem_args__isset __isset;

  void __set_authToken(const TSTRING& val) {
    authToken = val;
  }

  void __set_shutdownFlag(const TINT32 val) {
    shutdownFlag = val;
  }

  bool operator == (const fdsapi_shutdownSystem_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(shutdownFlag == rhs.shutdownFlag))
      return false;
    return true;
  }
  bool operator != (const fdsapi_shutdownSystem_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_shutdownSystem_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fdsapi_shutdownSystem_pargs {
 public:


  virtual ~fdsapi_shutdownSystem_pargs() throw() {}

  const TSTRING* authToken;
  const TINT32* shutdownFlag;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_shutdownSystem_result__isset {
  _fdsapi_shutdownSystem_result__isset() : success(false) {}
  bool success;
} _fdsapi_shutdownSystem_result__isset;

class fdsapi_shutdownSystem_result {
 public:

  fdsapi_shutdownSystem_result() : success(0) {
  }

  virtual ~fdsapi_shutdownSystem_result() throw() {}

  TBOOL success;

  _fdsapi_shutdownSystem_result__isset __isset;

  void __set_success(const TBOOL val) {
    success = val;
  }

  bool operator == (const fdsapi_shutdownSystem_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const fdsapi_shutdownSystem_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_shutdownSystem_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_shutdownSystem_presult__isset {
  _fdsapi_shutdownSystem_presult__isset() : success(false) {}
  bool success;
} _fdsapi_shutdownSystem_presult__isset;

class fdsapi_shutdownSystem_presult {
 public:


  virtual ~fdsapi_shutdownSystem_presult() throw() {}

  TBOOL* success;

  _fdsapi_shutdownSystem_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fdsapi_enumerateSessions_args__isset {
  _fdsapi_enumerateSessions_args__isset() : authToken(false), Version(false) {}
  bool authToken;
  bool Version;
} _fdsapi_enumerateSessions_args__isset;

class fdsapi_enumerateSessions_args {
 public:

  fdsapi_enumerateSessions_args() : authToken(), Version(0) {
  }

  virtual ~fdsapi_enumerateSessions_args() throw() {}

  TSTRING authToken;
  TINT32 Version;

  _fdsapi_enumerateSessions_args__isset __isset;

  void __set_authToken(const TSTRING& val) {
    authToken = val;
  }

  void __set_Version(const TINT32 val) {
    Version = val;
  }

  bool operator == (const fdsapi_enumerateSessions_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(Version == rhs.Version))
      return false;
    return true;
  }
  bool operator != (const fdsapi_enumerateSessions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_enumerateSessions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fdsapi_enumerateSessions_pargs {
 public:


  virtual ~fdsapi_enumerateSessions_pargs() throw() {}

  const TSTRING* authToken;
  const TINT32* Version;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_enumerateSessions_result__isset {
  _fdsapi_enumerateSessions_result__isset() : success(false) {}
  bool success;
} _fdsapi_enumerateSessions_result__isset;

class fdsapi_enumerateSessions_result {
 public:

  fdsapi_enumerateSessions_result() {
  }

  virtual ~fdsapi_enumerateSessions_result() throw() {}

  TReturnEnumerateSessions success;

  _fdsapi_enumerateSessions_result__isset __isset;

  void __set_success(const TReturnEnumerateSessions& val) {
    success = val;
  }

  bool operator == (const fdsapi_enumerateSessions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const fdsapi_enumerateSessions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_enumerateSessions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_enumerateSessions_presult__isset {
  _fdsapi_enumerateSessions_presult__isset() : success(false) {}
  bool success;
} _fdsapi_enumerateSessions_presult__isset;

class fdsapi_enumerateSessions_presult {
 public:


  virtual ~fdsapi_enumerateSessions_presult() throw() {}

  TReturnEnumerateSessions* success;

  _fdsapi_enumerateSessions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _fdsapi_querySessionInformation_args__isset {
  _fdsapi_querySessionInformation_args__isset() : authToken(false), sessionId(false), infoClass(false) {}
  bool authToken;
  bool sessionId;
  bool infoClass;
} _fdsapi_querySessionInformation_args__isset;

class fdsapi_querySessionInformation_args {
 public:

  fdsapi_querySessionInformation_args() : authToken(), sessionId(0), infoClass(0) {
  }

  virtual ~fdsapi_querySessionInformation_args() throw() {}

  TSTRING authToken;
  TINT32 sessionId;
  TINT32 infoClass;

  _fdsapi_querySessionInformation_args__isset __isset;

  void __set_authToken(const TSTRING& val) {
    authToken = val;
  }

  void __set_sessionId(const TINT32 val) {
    sessionId = val;
  }

  void __set_infoClass(const TINT32 val) {
    infoClass = val;
  }

  bool operator == (const fdsapi_querySessionInformation_args & rhs) const
  {
    if (!(authToken == rhs.authToken))
      return false;
    if (!(sessionId == rhs.sessionId))
      return false;
    if (!(infoClass == rhs.infoClass))
      return false;
    return true;
  }
  bool operator != (const fdsapi_querySessionInformation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_querySessionInformation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class fdsapi_querySessionInformation_pargs {
 public:


  virtual ~fdsapi_querySessionInformation_pargs() throw() {}

  const TSTRING* authToken;
  const TINT32* sessionId;
  const TINT32* infoClass;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_querySessionInformation_result__isset {
  _fdsapi_querySessionInformation_result__isset() : success(false) {}
  bool success;
} _fdsapi_querySessionInformation_result__isset;

class fdsapi_querySessionInformation_result {
 public:

  fdsapi_querySessionInformation_result() {
  }

  virtual ~fdsapi_querySessionInformation_result() throw() {}

  TReturnQuerySessionInformation success;

  _fdsapi_querySessionInformation_result__isset __isset;

  void __set_success(const TReturnQuerySessionInformation& val) {
    success = val;
  }

  bool operator == (const fdsapi_querySessionInformation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const fdsapi_querySessionInformation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const fdsapi_querySessionInformation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _fdsapi_querySessionInformation_presult__isset {
  _fdsapi_querySessionInformation_presult__isset() : success(false) {}
  bool success;
} _fdsapi_querySessionInformation_presult__isset;

class fdsapi_querySessionInformation_presult {
 public:


  virtual ~fdsapi_querySessionInformation_presult() throw() {}

  TReturnQuerySessionInformation* success;

  _fdsapi_querySessionInformation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class fdsapiClient : virtual public fdsapiIf {
 public:
  fdsapiClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  fdsapiClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  TINT32 ping(const TINT32 input);
  void send_ping(const TINT32 input);
  TINT32 recv_ping();
  TINT32 authenticateUser(const TSTRING& authToken, const TINT32 sessionId, const TSTRING& username, const TSTRING& password, const TSTRING& domain);
  void send_authenticateUser(const TSTRING& authToken, const TINT32 sessionId, const TSTRING& username, const TSTRING& password, const TSTRING& domain);
  TINT32 recv_authenticateUser();
  void virtualChannelOpen(TSTRING& _return, const TSTRING& authToken, const TINT32 sessionId, const TSTRING& virtualName);
  void send_virtualChannelOpen(const TSTRING& authToken, const TINT32 sessionId, const TSTRING& virtualName);
  void recv_virtualChannelOpen(TSTRING& _return);
  void virtualChannelOpenEx(TSTRING& _return, const TSTRING& authToken, const TINT32 sessionId, const TSTRING& virtualName, const TINT32 flags);
  void send_virtualChannelOpenEx(const TSTRING& authToken, const TINT32 sessionId, const TSTRING& virtualName, const TINT32 flags);
  void recv_virtualChannelOpenEx(TSTRING& _return);
  TBOOL virtualChannelClose(const TSTRING& authToken, const TINT32 sessionId, const TSTRING& virtualName);
  void send_virtualChannelClose(const TSTRING& authToken, const TINT32 sessionId, const TSTRING& virtualName);
  TBOOL recv_virtualChannelClose();
  TBOOL disconnectSession(const TSTRING& authToken, const TINT32 sessionId, const TBOOL wait);
  void send_disconnectSession(const TSTRING& authToken, const TINT32 sessionId, const TBOOL wait);
  TBOOL recv_disconnectSession();
  TBOOL logoffSession(const TSTRING& authToken, const TINT32 sessionId, const TBOOL wait);
  void send_logoffSession(const TSTRING& authToken, const TINT32 sessionId, const TBOOL wait);
  TBOOL recv_logoffSession();
  TBOOL shutdownSystem(const TSTRING& authToken, const TINT32 shutdownFlag);
  void send_shutdownSystem(const TSTRING& authToken, const TINT32 shutdownFlag);
  TBOOL recv_shutdownSystem();
  void enumerateSessions(TReturnEnumerateSessions& _return, const TSTRING& authToken, const TINT32 Version);
  void send_enumerateSessions(const TSTRING& authToken, const TINT32 Version);
  void recv_enumerateSessions(TReturnEnumerateSessions& _return);
  void querySessionInformation(TReturnQuerySessionInformation& _return, const TSTRING& authToken, const TINT32 sessionId, const TINT32 infoClass);
  void send_querySessionInformation(const TSTRING& authToken, const TINT32 sessionId, const TINT32 infoClass);
  void recv_querySessionInformation(TReturnQuerySessionInformation& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class fdsapiProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<fdsapiIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (fdsapiProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_authenticateUser(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_virtualChannelOpen(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_virtualChannelOpenEx(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_virtualChannelClose(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disconnectSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_logoffSession(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdownSystem(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_enumerateSessions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_querySessionInformation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  fdsapiProcessor(boost::shared_ptr<fdsapiIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &fdsapiProcessor::process_ping;
    processMap_["authenticateUser"] = &fdsapiProcessor::process_authenticateUser;
    processMap_["virtualChannelOpen"] = &fdsapiProcessor::process_virtualChannelOpen;
    processMap_["virtualChannelOpenEx"] = &fdsapiProcessor::process_virtualChannelOpenEx;
    processMap_["virtualChannelClose"] = &fdsapiProcessor::process_virtualChannelClose;
    processMap_["disconnectSession"] = &fdsapiProcessor::process_disconnectSession;
    processMap_["logoffSession"] = &fdsapiProcessor::process_logoffSession;
    processMap_["shutdownSystem"] = &fdsapiProcessor::process_shutdownSystem;
    processMap_["enumerateSessions"] = &fdsapiProcessor::process_enumerateSessions;
    processMap_["querySessionInformation"] = &fdsapiProcessor::process_querySessionInformation;
  }

  virtual ~fdsapiProcessor() {}
};

class fdsapiProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  fdsapiProcessorFactory(const ::boost::shared_ptr< fdsapiIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< fdsapiIfFactory > handlerFactory_;
};

class fdsapiMultiface : virtual public fdsapiIf {
 public:
  fdsapiMultiface(std::vector<boost::shared_ptr<fdsapiIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~fdsapiMultiface() {}
 protected:
  std::vector<boost::shared_ptr<fdsapiIf> > ifaces_;
  fdsapiMultiface() {}
  void add(boost::shared_ptr<fdsapiIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  TINT32 ping(const TINT32 input) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping(input);
    }
    return ifaces_[i]->ping(input);
  }

  TINT32 authenticateUser(const TSTRING& authToken, const TINT32 sessionId, const TSTRING& username, const TSTRING& password, const TSTRING& domain) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->authenticateUser(authToken, sessionId, username, password, domain);
    }
    return ifaces_[i]->authenticateUser(authToken, sessionId, username, password, domain);
  }

  void virtualChannelOpen(TSTRING& _return, const TSTRING& authToken, const TINT32 sessionId, const TSTRING& virtualName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->virtualChannelOpen(_return, authToken, sessionId, virtualName);
    }
    ifaces_[i]->virtualChannelOpen(_return, authToken, sessionId, virtualName);
    return;
  }

  void virtualChannelOpenEx(TSTRING& _return, const TSTRING& authToken, const TINT32 sessionId, const TSTRING& virtualName, const TINT32 flags) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->virtualChannelOpenEx(_return, authToken, sessionId, virtualName, flags);
    }
    ifaces_[i]->virtualChannelOpenEx(_return, authToken, sessionId, virtualName, flags);
    return;
  }

  TBOOL virtualChannelClose(const TSTRING& authToken, const TINT32 sessionId, const TSTRING& virtualName) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->virtualChannelClose(authToken, sessionId, virtualName);
    }
    return ifaces_[i]->virtualChannelClose(authToken, sessionId, virtualName);
  }

  TBOOL disconnectSession(const TSTRING& authToken, const TINT32 sessionId, const TBOOL wait) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disconnectSession(authToken, sessionId, wait);
    }
    return ifaces_[i]->disconnectSession(authToken, sessionId, wait);
  }

  TBOOL logoffSession(const TSTRING& authToken, const TINT32 sessionId, const TBOOL wait) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->logoffSession(authToken, sessionId, wait);
    }
    return ifaces_[i]->logoffSession(authToken, sessionId, wait);
  }

  TBOOL shutdownSystem(const TSTRING& authToken, const TINT32 shutdownFlag) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shutdownSystem(authToken, shutdownFlag);
    }
    return ifaces_[i]->shutdownSystem(authToken, shutdownFlag);
  }

  void enumerateSessions(TReturnEnumerateSessions& _return, const TSTRING& authToken, const TINT32 Version) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->enumerateSessions(_return, authToken, Version);
    }
    ifaces_[i]->enumerateSessions(_return, authToken, Version);
    return;
  }

  void querySessionInformation(TReturnQuerySessionInformation& _return, const TSTRING& authToken, const TINT32 sessionId, const TINT32 infoClass) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->querySessionInformation(_return, authToken, sessionId, infoClass);
    }
    ifaces_[i]->querySessionInformation(_return, authToken, sessionId, infoClass);
    return;
  }

};

} // namespace

#endif
